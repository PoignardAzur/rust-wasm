(module binary
  "\00\61\73\6d\01\00\00\00\01\88\80\80\80\00\02\60"
  "\00\00\60\00\01\7f\03\a7\80\80\80\00\26\00\00\01"
  "\00\01\01\00\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01\01"
  "\01\01\01\07\f5\87\80\80\00\26\1a\66\75\6e\63\2d"
  "\75\6e\77\69\6e\64\2d\62\79\2d\75\6e\72\65\61\63"
  "\68\61\62\6c\65\00\00\11\66\75\6e\63\2d\75\6e\77"
  "\69\6e\64\2d\62\79\2d\62\72\00\01\17\66\75\6e\63"
  "\2d\75\6e\77\69\6e\64\2d\62\79\2d\62\72\2d\76\61"
  "\6c\75\65\00\02\17\66\75\6e\63\2d\75\6e\77\69\6e"
  "\64\2d\62\79\2d\62\72\5f\74\61\62\6c\65\00\03\1d"
  "\66\75\6e\63\2d\75\6e\77\69\6e\64\2d\62\79\2d\62"
  "\72\5f\74\61\62\6c\65\2d\76\61\6c\75\65\00\04\15"
  "\66\75\6e\63\2d\75\6e\77\69\6e\64\2d\62\79\2d\72"
  "\65\74\75\72\6e\00\05\1b\62\6c\6f\63\6b\2d\75\6e"
  "\77\69\6e\64\2d\62\79\2d\75\6e\72\65\61\63\68\61"
  "\62\6c\65\00\06\12\62\6c\6f\63\6b\2d\75\6e\77\69"
  "\6e\64\2d\62\79\2d\62\72\00\07\18\62\6c\6f\63\6b"
  "\2d\75\6e\77\69\6e\64\2d\62\79\2d\62\72\2d\76\61"
  "\6c\75\65\00\08\18\62\6c\6f\63\6b\2d\75\6e\77\69"
  "\6e\64\2d\62\79\2d\62\72\5f\74\61\62\6c\65\00\09"
  "\1e\62\6c\6f\63\6b\2d\75\6e\77\69\6e\64\2d\62\79"
  "\2d\62\72\5f\74\61\62\6c\65\2d\76\61\6c\75\65\00"
  "\0a\16\62\6c\6f\63\6b\2d\75\6e\77\69\6e\64\2d\62"
  "\79\2d\72\65\74\75\72\6e\00\0b\22\62\6c\6f\63\6b"
  "\2d\6e\65\73\74\65\64\2d\75\6e\77\69\6e\64\2d\62"
  "\79\2d\75\6e\72\65\61\63\68\61\62\6c\65\00\0c\19"
  "\62\6c\6f\63\6b\2d\6e\65\73\74\65\64\2d\75\6e\77"
  "\69\6e\64\2d\62\79\2d\62\72\00\0d\1f\62\6c\6f\63"
  "\6b\2d\6e\65\73\74\65\64\2d\75\6e\77\69\6e\64\2d"
  "\62\79\2d\62\72\2d\76\61\6c\75\65\00\0e\1f\62\6c"
  "\6f\63\6b\2d\6e\65\73\74\65\64\2d\75\6e\77\69\6e"
  "\64\2d\62\79\2d\62\72\5f\74\61\62\6c\65\00\0f\25"
  "\62\6c\6f\63\6b\2d\6e\65\73\74\65\64\2d\75\6e\77"
  "\69\6e\64\2d\62\79\2d\62\72\5f\74\61\62\6c\65\2d"
  "\76\61\6c\75\65\00\10\1d\62\6c\6f\63\6b\2d\6e\65"
  "\73\74\65\64\2d\75\6e\77\69\6e\64\2d\62\79\2d\72"
  "\65\74\75\72\6e\00\11\17\75\6e\61\72\79\2d\61\66"
  "\74\65\72\2d\75\6e\72\65\61\63\68\61\62\6c\65\00"
  "\12\0e\75\6e\61\72\79\2d\61\66\74\65\72\2d\62\72"
  "\00\13\14\75\6e\61\72\79\2d\61\66\74\65\72\2d\62"
  "\72\5f\74\61\62\6c\65\00\14\12\75\6e\61\72\79\2d"
  "\61\66\74\65\72\2d\72\65\74\75\72\6e\00\15\18\62"
  "\69\6e\61\72\79\2d\61\66\74\65\72\2d\75\6e\72\65"
  "\61\63\68\61\62\6c\65\00\16\0f\62\69\6e\61\72\79"
  "\2d\61\66\74\65\72\2d\62\72\00\17\15\62\69\6e\61"
  "\72\79\2d\61\66\74\65\72\2d\62\72\5f\74\61\62\6c"
  "\65\00\18\13\62\69\6e\61\72\79\2d\61\66\74\65\72"
  "\2d\72\65\74\75\72\6e\00\19\18\73\65\6c\65\63\74"
  "\2d\61\66\74\65\72\2d\75\6e\72\65\61\63\68\61\62"
  "\6c\65\00\1a\0f\73\65\6c\65\63\74\2d\61\66\74\65"
  "\72\2d\62\72\00\1b\15\73\65\6c\65\63\74\2d\61\66"
  "\74\65\72\2d\62\72\5f\74\61\62\6c\65\00\1c\13\73"
  "\65\6c\65\63\74\2d\61\66\74\65\72\2d\72\65\74\75"
  "\72\6e\00\1d\1d\62\6c\6f\63\6b\2d\76\61\6c\75\65"
  "\2d\61\66\74\65\72\2d\75\6e\72\65\61\63\68\61\62"
  "\6c\65\00\1e\14\62\6c\6f\63\6b\2d\76\61\6c\75\65"
  "\2d\61\66\74\65\72\2d\62\72\00\1f\1a\62\6c\6f\63"
  "\6b\2d\76\61\6c\75\65\2d\61\66\74\65\72\2d\62\72"
  "\5f\74\61\62\6c\65\00\20\18\62\6c\6f\63\6b\2d\76"
  "\61\6c\75\65\2d\61\66\74\65\72\2d\72\65\74\75\72"
  "\6e\00\21\1c\6c\6f\6f\70\2d\76\61\6c\75\65\2d\61"
  "\66\74\65\72\2d\75\6e\72\65\61\63\68\61\62\6c\65"
  "\00\22\13\6c\6f\6f\70\2d\76\61\6c\75\65\2d\61\66"
  "\74\65\72\2d\62\72\00\23\19\6c\6f\6f\70\2d\76\61"
  "\6c\75\65\2d\61\66\74\65\72\2d\62\72\5f\74\61\62"
  "\6c\65\00\24\17\6c\6f\6f\70\2d\76\61\6c\75\65\2d"
  "\61\66\74\65\72\2d\72\65\74\75\72\6e\00\25\0a\93"
  "\86\80\80\00\26\87\80\80\80\00\00\41\03\42\01\00"
  "\0b\88\80\80\80\00\00\41\03\42\01\0c\00\0b\8a\80"
  "\80\80\00\00\41\03\42\01\41\09\0c\00\0b\8b\80\80"
  "\80\00\00\41\03\42\01\41\00\0e\00\00\0b\8d\80\80"
  "\80\00\00\41\03\42\01\41\09\41\00\0e\00\00\0b\89"
  "\80\80\80\00\00\41\03\42\01\41\09\0f\0b\8a\80\80"
  "\80\00\00\02\40\41\03\42\01\00\0b\0b\8d\80\80\80"
  "\00\00\02\40\41\03\42\01\0c\00\0b\41\09\0b\8d\80"
  "\80\80\00\00\02\7f\41\03\42\01\41\09\0c\00\0b\0b"
  "\90\80\80\80\00\00\02\40\41\03\42\01\41\00\0e\00"
  "\00\0b\41\09\0b\90\80\80\80\00\00\02\7f\41\03\42"
  "\01\41\09\41\00\0e\00\00\0b\0b\8c\80\80\80\00\00"
  "\02\7f\41\03\42\01\41\09\0f\0b\0b\8d\80\80\80\00"
  "\00\02\7f\41\03\02\40\42\01\00\0b\0b\0b\91\80\80"
  "\80\00\00\02\40\41\03\02\40\42\01\0c\01\0b\1a\0b"
  "\41\09\0b\90\80\80\80\00\00\02\7f\41\03\02\40\42"
  "\01\41\09\0c\01\0b\0b\0b\94\80\80\80\00\00\02\40"
  "\41\03\02\40\42\01\41\01\0e\00\01\0b\1a\0b\41\09"
  "\0b\93\80\80\80\00\00\02\7f\41\03\02\40\42\01\41"
  "\09\41\01\0e\00\01\0b\0b\0b\8f\80\80\80\00\00\02"
  "\7f\41\03\02\40\42\01\41\09\0f\0b\0b\0b\89\80\80"
  "\80\00\00\43\00\00\00\00\00\50\0b\8f\80\80\80\00"
  "\00\02\7f\43\00\00\00\00\41\09\0c\00\50\0b\0b\93"
  "\80\80\80\00\00\02\7f\43\00\00\00\00\41\09\41\00"
  "\0e\01\00\00\50\0b\0b\8b\80\80\80\00\00\43\00\00"
  "\00\00\41\09\0f\50\0b\92\80\80\80\00\00\43\00\00"
  "\00\00\44\00\00\00\00\00\00\f0\3f\00\51\0b\98\80"
  "\80\80\00\00\02\7f\43\00\00\00\00\44\00\00\00\00"
  "\00\00\f0\3f\41\09\0c\00\51\0b\0b\9b\80\80\80\00"
  "\00\02\7f\43\00\00\00\00\44\00\00\00\00\00\00\f0"
  "\3f\41\09\41\00\0e\00\00\51\0b\0b\94\80\80\80\00"
  "\00\43\00\00\00\00\44\00\00\00\00\00\00\f0\3f\41"
  "\09\0f\51\0b\94\80\80\80\00\00\43\00\00\00\00\44"
  "\00\00\00\00\00\00\f0\3f\42\00\00\1b\0b\9a\80\80"
  "\80\00\00\02\7f\43\00\00\00\00\44\00\00\00\00\00"
  "\00\f0\3f\42\00\41\09\0c\00\1b\0b\0b\9d\80\80\80"
  "\00\00\02\7f\43\00\00\00\00\44\00\00\00\00\00\00"
  "\f0\3f\42\00\41\09\41\00\0e\00\00\1b\0b\0b\96\80"
  "\80\80\00\00\43\00\00\00\00\44\00\00\00\00\00\00"
  "\f0\3f\42\01\41\09\0f\1b\0b\8b\80\80\80\00\00\02"
  "\7f\43\00\00\00\00\00\0b\0b\8e\80\80\80\00\00\02"
  "\7f\43\00\00\00\00\41\09\0c\00\0b\0b\92\80\80\80"
  "\00\00\02\7f\43\00\00\00\00\41\09\41\00\0e\01\00"
  "\00\0b\0b\8d\80\80\80\00\00\02\7f\43\00\00\00\00"
  "\41\09\0f\0b\0b\8b\80\80\80\00\00\03\7f\43\00\00"
  "\00\00\00\0b\0b\91\80\80\80\00\00\02\7f\03\7f\43"
  "\00\00\00\00\41\09\0c\01\0b\0b\0b\95\80\80\80\00"
  "\00\02\7f\03\7f\43\00\00\00\00\41\09\41\00\0e\01"
  "\01\01\0b\0b\0b\8d\80\80\80\00\00\03\7f\43\00\00"
  "\00\00\41\09\0f\0b\0b"
)
(assert_trap (invoke "func-unwind-by-unreachable") "unreachable")
(assert_return (invoke "func-unwind-by-br"))
(assert_return (invoke "func-unwind-by-br-value") (i32.const 9))
(assert_return (invoke "func-unwind-by-br_table"))
(assert_return (invoke "func-unwind-by-br_table-value") (i32.const 9))
(assert_return (invoke "func-unwind-by-return") (i32.const 9))
(assert_trap (invoke "block-unwind-by-unreachable") "unreachable")
(assert_return (invoke "block-unwind-by-br") (i32.const 9))
(assert_return (invoke "block-unwind-by-br-value") (i32.const 9))
(assert_return (invoke "block-unwind-by-br_table") (i32.const 9))
(assert_return (invoke "block-unwind-by-br_table-value") (i32.const 9))
(assert_return (invoke "block-unwind-by-return") (i32.const 9))
(assert_trap (invoke "block-nested-unwind-by-unreachable") "unreachable")
(assert_return (invoke "block-nested-unwind-by-br") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-br-value") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-br_table") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-br_table-value") (i32.const 9))
(assert_return (invoke "block-nested-unwind-by-return") (i32.const 9))
(assert_trap (invoke "unary-after-unreachable") "unreachable")
(assert_return (invoke "unary-after-br") (i32.const 9))
(assert_return (invoke "unary-after-br_table") (i32.const 9))
(assert_return (invoke "unary-after-return") (i32.const 9))
(assert_trap (invoke "binary-after-unreachable") "unreachable")
(assert_return (invoke "binary-after-br") (i32.const 9))
(assert_return (invoke "binary-after-br_table") (i32.const 9))
(assert_return (invoke "binary-after-return") (i32.const 9))
(assert_trap (invoke "select-after-unreachable") "unreachable")
(assert_return (invoke "select-after-br") (i32.const 9))
(assert_return (invoke "select-after-br_table") (i32.const 9))
(assert_return (invoke "select-after-return") (i32.const 9))
(assert_trap (invoke "block-value-after-unreachable") "unreachable")
(assert_return (invoke "block-value-after-br") (i32.const 9))
(assert_return (invoke "block-value-after-br_table") (i32.const 9))
(assert_return (invoke "block-value-after-return") (i32.const 9))
(assert_trap (invoke "loop-value-after-unreachable") "unreachable")
(assert_return (invoke "loop-value-after-br") (i32.const 9))
(assert_return (invoke "loop-value-after-br_table") (i32.const 9))
(assert_return (invoke "loop-value-after-return") (i32.const 9))
